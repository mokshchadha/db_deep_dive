const { Client } = require('pg');

// PostgreSQL connection
const pgClient = new Client({
    user: 'your_pg_user',
    host: 'localhost',
    database: 'your_pg_database',
    password: 'your_pg_password',
    port: 5432,
});

pgClient.connect();

const createTables = async () => {
    try {
        // Create Orders table
        await pgClient.query(`
           CREATE TABLE your_table_name (
    id SERIAL PRIMARY KEY,
    buyer_due_date DATE,
    buyer_payment_terms VARCHAR(255),
    company_gst VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    dispatch_date DATE,
    due_date DATE,
    freight_payment VARCHAR(255),
    godown_id INTEGER,
    group_state_owner VARCHAR(255),
    order_no VARCHAR(255),
    quantity INTEGER,
    single_quantity INTEGER,
    status VARCHAR(50),
    supplier_id INTEGER
);
            );
        `);

        // Create VendorCredits table
        await pgClient.query(`
            CREATE TABLE IF NOT EXISTS VendorCredits (
                id SERIAL PRIMARY KEY,
                order_id INT REFERENCES Orders(id),
                data JSONB
            );
        `);

        // Create ActivityLog table
        await pgClient.query(`
            CREATE TABLE IF NOT EXISTS ActivityLog (
                id SERIAL PRIMARY KEY,
                order_id INT REFERENCES Orders(id),
                data JSONB
            );
        `);

        // Create Notes table
        await pgClient.query(`
            CREATE TABLE IF NOT EXISTS Notes (
                id SERIAL PRIMARY KEY,
                order_id INT REFERENCES Orders(id),
                BCNChangeRemark VARCHAR(255),
                BPChangeRemark VARCHAR(255),
                BPTChangeRemark VARCHAR(255),
                deliveredToChangeRemark VARCHAR(255),
                qtyChangeRemark VARCHAR(255),
                SCNChangeRemark VARCHAR(255),
                SPChangeRemark VARCHAR(255)
            );
        `);

        // Create Invoices table
        await pgClient.query(`
            CREATE TABLE IF NOT EXISTS Invoices (
                id SERIAL PRIMARY KEY,
                order_id INT REFERENCES Orders(id),
                invoice VARCHAR(255),
                invoiceBalance VARCHAR(255),
                invoiceDatesDifferent BOOLEAN,
                invoiceDueDays VARCHAR(255),
                invoiceReceived BOOLEAN,
                invoiceStatus VARCHAR(255),
                invoiceValue VARCHAR(255)
            );
        `);

        // Create DelayReasons table
        await pgClient.query(`
            CREATE TABLE IF NOT EXISTS DelayReasons (
                id SERIAL PRIMARY KEY,
                order_id INT REFERENCES Orders(id),
                dispatchDate VARCHAR(255) NOT NULL,
                remarks VARCHAR(255) NOT NULL,
                type VARCHAR(255) NOT NULL
            );
        `);

        // Create Attachments table
        await pgClient.query(`
            CREATE TABLE IF NOT EXISTS Attachments (
                id SERIAL PRIMARY KEY,
                order_id INT REFERENCES Orders(id),
                created BIGINT NOT NULL,
                isAutoGenerated BOOLEAN,
                name VARCHAR(255) NOT NULL,
                remark VARCHAR(255),
                source VARCHAR(255) NOT NULL,
                type VARCHAR(255) NOT NULL,
                url VARCHAR(255),
                user JSONB,
                userProfile VARCHAR(255)
            );
        `);

        console.log('Tables created successfully!');
    } catch (err) {
        console.error('Error creating tables', err.stack);
    } finally {
        pgClient.end();
    }
};

createTables();
